# %matplotlib inline
import numpy as np                  #для работы с массивами - их по умолчанию в Python нет
import matplotlib.pyplot as plt

#0 Инициализация отображения
plt.xlim(-1, 5)
plt.ylim(-1, 5)
plt.grid(True)


a = np.array([1, 2, 3, 4, 5], float)            #создание векторов
b = np.array([0, 9, 8, 7, 6], float)
np.dot(a, b)                                    #скалярное произведение векторов (общий матричный метод)
np.dot(a.T, b)                                  #скалярное произведение векторов - тоже самое, так как так настроенно в питон
np.inner(a, b)                                  #скалярное произведение векторов(специфичный метод для векторв)
np.outer(a, b)                                  #умножение двух векторов для получения матрицы(именно особенность Python)

a = np.array([3, 4], float)
np.dot(a, a)             #квадрат длина вектора
np.linalg.norm(a)        #длина вектора - считается как корень из скалярного произведения
print(a)

#1 Отображение векторов с точкой выхода по умолчанию.
# Используется 2 массива - в первом коорединаты X, во втором - Y. Кол-во векторов равно кол-ву элементов в каждом массиве

# При этом каждый вектор будет сдвигаться на 1 по x
U, V = [3], [4]
plt.quiver(U, V, angles='xy', scale_units='xy', scale=1)        #оторажение вектора
plt.show()

#2 Несколько векторов с выходом из одной точки.
# Задаются дополниельные массивы с точками выхода. Длина каждого из массивов - равно кол-ву векторов
#
# X, Y = np.array([0, 0, 0]), np.array([0, 0, 0])
# U, V = np.array([5, 3, 3]), np.array([4, 2, 0])
#
# plt.quiver(X, Y, U, V, angles='xy', scale_units='xy', scale=1)
# plt.show()

#3 Несколько векторов с выходом из разных точек
# X, Y = np.array([0, 2, 0]), np.array([0, 3, 0])
# U, V = np.array([2, 3, 5]), np.array([3, 1, 4])
#
# plt.quiver(X, Y, U, V, angles='xy', scale_units='xy', scale=1)
# plt.show()
